#!/bin/bash
#############################################
## Global variables
#############################################
set -o noclobber
set -o errexit
set -o nounset

if [ -x /usr/bin/tput ]; then
  red=`tput setaf 1` # error
  green=`tput setaf 2` # nice
  yellow=`tput setaf 3` # warning
  blue=`tput setaf 4` # info
  purple=`tput setaf 5` # command
  teal=`tput setaf 6` # detail
  white=`tput setaf 7` #
  reset=`tput sgr0`
fi

dir="$(cd "$(dirname "$0")"; pwd -P)"

CODE_STYLE="eclipse-java-google-style.xml"


#############################################
## Functions
#############################################

usage() {
  echo "${reset} Usage: $0 [options] [file1.java file2.java ...] ${reset}"
  echo ""
  echo "${blue} Options:   ${reset}"
  echo "${blue}          -c, --code-style =filename     specifying code-style e.g. code-style.xml ${reset}"
  echo "${blue}          -h, --help                     help ${reset}"
  exit 1
}

checkError() {
    out="$1"
    if [[ $out =~ ^.*CAUTION.*$ ]]; then
        echo "${red} Error: there are unformatted file"
        echo "$out"
        exit 1
    fi
    exit 0
}

#############################################
## Check arguments
#############################################
if [[ $# -lt 1 ]]; then
    echo "${red} Error : invalid parameter !" >&2
    usage
    exit 1
fi

for i in "$@"
  do
    case $i in
      -c=*|--code-style=*)    CODE_STYLE="${i#*=}" ; shift;;
      -h|--help)              usage            ;;
    esac
done


jar="$dir/bin/ejf-jar-with-dependencies.jar"
codeStyleParam="-DcodeStyle=$dir/$CODE_STYLE"
main="ejf.Main"
patterns="\.java$"


#############################################
## Run
#############################################

# filtering files to keep only java files
files=""
for file in $@ ; do
  matched=$(echo "$file" | grep -Ei "$patterns")
  if [[ -f $matched ]] ; then
    files="$files $matched"
  fi
done

JAVA_OPTS="$codeStyleParam"
echo ${blue}
java $JAVA_OPTS -cp $jar $main $files | tee $dir/tmp.log
echo ${reset}

# echo ${teal} $(cat $dir/tmp.log) ${reset}

checkError $(cat $dir/tmp.log)
